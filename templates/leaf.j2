{# Leaf Switch Configuration Template #}
system {
    host-name {{ leaf.name }};
    root-authentication {
        encrypted-password "$6$encrypted$password";
    }
    services {
        ssh {
            root-login deny;
            protocol-version v2;
        }
        netconf {
            ssh;
        }
    }
    syslog {
        file messages {
            any notice;
            authorization info;
        }
    }
    ntp {
        server 192.168.1.1;
        server 192.168.1.2;
    }
}

interfaces {
    {# Loopback interface #}
    lo0 {
        unit 0 {
            family inet {
                address {{ leaf.loopback }}/32;
            }
        }
    }
    
    {# Management interface #}
    em0 {
        unit 0 {
            family inet {
                address {{ leaf.mgmt_ip }}/24;
            }
        }
    }
    
    {# Fabric interfaces to spines #}
    {% for link in p2p_links if link.leaf == leaf.name %}
    et-0/0/{{ 48 + loop.index0 }} {
        description "To {{ link.spine }}";
        mtu {{ config.fabric.underlay.mtu }};
        unit 0 {
            family inet {
                address {{ link.leaf_ip }}/31;
            }
        }
    }
    {% endfor %}
    
    {# IRB interfaces for VLANs #}
    {% for zone in config.zones %}
    {% for idx, subnet in enumerate(zone.subnets) %}
    irb {
        unit {{ zone.vni_base + idx }} {
            family inet {
                address {{ subnet | replace('/24', '.1/24') }};
            }
            mac 00:00:5e:00:{{ '%02x' | format(zone.vni_base // 256) }}:{{ '%02x' | format(idx) }};
        }
    }
    {% endfor %}
    {% endfor %}
}

routing-options {
    router-id {{ leaf.loopback }};
    autonomous-system {{ leaf.asn }};
    forwarding-table {
        export LOAD_BALANCE;
    }
}

protocols {
    bgp {
        group UNDERLAY {
            type external;
            mtu-discovery;
            import UNDERLAY_IN;
            export UNDERLAY_OUT;
            multipath multiple-as;
            {% for link in p2p_links if link.leaf == leaf.name %}
            neighbor {{ link.spine_ip }} {
                description {{ link.spine }};
                peer-as {{ link.spine_asn }};
            }
            {% endfor %}
        }
        group OVERLAY {
            type internal;
            local-address {{ leaf.loopback }};
            family evpn {
                signaling;
            }
            multihop {
                ttl 255;
            }
            {% for rr in config.fabric.overlay.route_reflector %}
            neighbor {{ rr }} {
                description "Route Reflector";
            }
            {% endfor %}
        }
    }
    
    evpn {
        encapsulation vxlan;
        extended-vni-list all;
        multicast-mode ingress-replication;
        default-gateway no-gateway-community;
    }
    
    lldp {
        interface all;
    }
}

switch-options {
    vtep-source-interface lo0.0;
    route-distinguisher {{ leaf.loopback }}:1;
    vrf-target target:{{ config.fabric.asn }}:1;
}

vlans {
    {% for zone in config.zones %}
    {% for idx, subnet in enumerate(zone.subnets) %}
    VLAN_{{ zone.vni_base + idx }} {
        description "{{ zone.name }} - {{ subnet }}";
        vlan-id {{ 100 + idx }};
        l3-interface irb.{{ zone.vni_base + idx }};
        vxlan {
            vni {{ zone.vni_base + idx }};
            ingress-node-replication;
        }
    }
    {% endfor %}
    {% endfor %}
}

policy-options {
    policy-statement UNDERLAY_IN {
        term LOOPBACKS {
            from {
                protocol bgp;
                route-filter 192.168.0.0/24 orlonger;
            }
            then accept;
        }
        term REJECT {
            then reject;
        }
    }
    
    policy-statement UNDERLAY_OUT {
        term LOOPBACK {
            from {
                protocol direct;
                route-filter {{ leaf.loopback }}/32 exact;
            }
            then accept;
        }
        term REJECT {
            then reject;
        }
    }
    
    policy-statement LOAD_BALANCE {
        term ECMP {
            then {
                load-balance per-packet;
            }
        }
    }
}

{# Zero Trust Segmentation #}
firewall {
    family ethernet-switching {
        {% for zone in config.zones %}
        filter {{ zone.name }}_FILTER {
            term ALLOW_SAME_ZONE {
                from {
                    source-address {{ zone.subnets[0] }};
                    destination-address {{ zone.subnets[0] }};
                }
                then accept;
            }
            term LOG_CROSS_ZONE {
                then {
                    log;
                    reject;
                }
            }
        }
        {% endfor %}
    }
}
