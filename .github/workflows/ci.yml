name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.10'

jobs:
  lint:
    name: 🎨 Linting
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black pylint yamllint

    - name: 🔍 Run Black formatter check
      run: black --check scripts/ --line-length 120

    - name: 🔍 Run Flake8 linter
      run: flake8 scripts/ --max-line-length=120 --ignore=E203,W503

    - name: 🔍 Run Pylint
      run: pylint scripts/*.py --max-line-length=120 || true

    - name: 🔍 YAML Lint
      run: yamllint configs/ -d relaxed

  test:
    name: 🧪 Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3

    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock

    - name: 🧪 Run unit tests
      run: |
        pytest tests/ -v --cov=scripts --cov-report=xml --cov-report=term || true

    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3

    - name: 🔍 Run Trivy security scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: 📤 Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

    - name: 🔍 Check Python dependencies with Safety
      run: |
        pip install safety
        safety check --json || true

  validate:
    name: ✅ Validate Configurations
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🔍 Validate YAML configurations
      run: |
        python -c "
        import yaml
        import sys
        from pathlib import Path

        errors = []
        for yaml_file in Path('configs').glob('*.yaml'):
            try:
                with open(yaml_file) as f:
                    yaml.safe_load(f)
                print(f'✅ {yaml_file} is valid')
            except Exception as e:
                errors.append(f'❌ {yaml_file}: {e}')

        if errors:
            for error in errors:
                print(error)
            sys.exit(1)
        "

    - name: 🔍 Validate Jinja2 templates
      run: |
        python -c "
        from jinja2 import Environment, FileSystemLoader, TemplateSyntaxError
        from pathlib import Path
        import sys

        env = Environment(loader=FileSystemLoader('templates'))
        errors = []

        for template_file in Path('templates').glob('*.j2'):
            try:
                env.get_template(template_file.name)
                print(f'✅ {template_file} is valid')
            except TemplateSyntaxError as e:
                errors.append(f'❌ {template_file}: {e}')

        if errors:
            for error in errors:
                print(error)
            sys.exit(1)
        "

  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [lint, test, security, validate]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: 🏗️ Build package
      run: |
        # Create setup.py if needed
        cat > setup.py << EOF
        from setuptools import setup, find_packages

        setup(
            name="junos-evpn-automation",
            version="1.0.0",
            packages=find_packages(),
            install_requires=open('requirements.txt').read().splitlines(),
            python_requires='>=3.8',
        )
        EOF

        python -m build

    - name: 📤 Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: distribution
        path: dist/

  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test, security, validate]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3

    - name: 🐳 Create Dockerfile
      run: |
        cat > Dockerfile << EOF
        FROM python:3.10-slim

        WORKDIR /app

        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        COPY . .

        CMD ["python", "--version"]
        EOF

    - name: 🏗️ Build Docker image
      run: docker build -t junos-evpn-automation:latest .

    - name: 🧪 Test Docker image
      run: docker run --rm junos-evpn-automation:latest python --version

  documentation:
    name: 📚 Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3

    - name: 🔍 Check README
      run: |
        if [ ! -f "README.md" ]; then
          echo "❌ README.md not found"
          exit 1
        fi
        echo "✅ README.md exists"

    - name: 🔍 Check documentation files
      run: |
        required_docs=("docs/ARCHITECTURE.md" "docs/DEPLOYMENT.md" "docs/API.md")
        for doc in "${required_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "❌ $doc not found"
            exit 1
          fi
          echo "✅ $doc exists"
        done

  release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    needs: [build, docker, documentation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3

    - name: 📥 Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: distribution
        path: dist/

    - name: 🏷️ Generate release notes
      run: |
        echo "## 🎉 Release Notes" > release_notes.md
        echo "" >> release_notes.md
        echo "### ✨ Features" >> release_notes.md
        echo "- Enhanced visual documentation" >> release_notes.md
        echo "- Comprehensive API reference" >> release_notes.md
        echo "- Production-ready deployment guide" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 📦 Artifacts" >> release_notes.md
        echo "- Python package available in dist/" >> release_notes.md
        echo "- Docker image: junos-evpn-automation:latest" >> release_notes.md

    - name: 🚀 Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        body_path: release_notes.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [lint, test, security, validate, build]
    if: always()

    steps:
    - name: 📊 Summary
      run: |
        echo "## 📊 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Lint | ${{ needs.lint.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test | ${{ needs.test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ${{ needs.security.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Validate | ${{ needs.validate.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY